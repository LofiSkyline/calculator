// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: calculator.proto

package calculatorconnect

import (
	context "context"
	errors "errors"
	gen "github.com/LofiSkyline/calculator/gen"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// CalculatorServiceName is the fully-qualified name of the CalculatorService service.
	CalculatorServiceName = "calculator.CalculatorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CalculatorServiceComputeExpressionProcedure is the fully-qualified name of the
	// CalculatorService's ComputeExpression RPC.
	CalculatorServiceComputeExpressionProcedure = "/calculator.CalculatorService/ComputeExpression"
)

// CalculatorServiceClient is a client for the calculator.CalculatorService service.
type CalculatorServiceClient interface {
	ComputeExpression(context.Context, *connect_go.Request[gen.ExpressionRequest]) (*connect_go.Response[gen.ExpressionResponse], error)
}

// NewCalculatorServiceClient constructs a client for the calculator.CalculatorService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCalculatorServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) CalculatorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &calculatorServiceClient{
		computeExpression: connect_go.NewClient[gen.ExpressionRequest, gen.ExpressionResponse](
			httpClient,
			baseURL+CalculatorServiceComputeExpressionProcedure,
			opts...,
		),
	}
}

// calculatorServiceClient implements CalculatorServiceClient.
type calculatorServiceClient struct {
	computeExpression *connect_go.Client[gen.ExpressionRequest, gen.ExpressionResponse]
}

// ComputeExpression calls calculator.CalculatorService.ComputeExpression.
func (c *calculatorServiceClient) ComputeExpression(ctx context.Context, req *connect_go.Request[gen.ExpressionRequest]) (*connect_go.Response[gen.ExpressionResponse], error) {
	return c.computeExpression.CallUnary(ctx, req)
}

// CalculatorServiceHandler is an implementation of the calculator.CalculatorService service.
type CalculatorServiceHandler interface {
	ComputeExpression(context.Context, *connect_go.Request[gen.ExpressionRequest]) (*connect_go.Response[gen.ExpressionResponse], error)
}

// NewCalculatorServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCalculatorServiceHandler(svc CalculatorServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	calculatorServiceComputeExpressionHandler := connect_go.NewUnaryHandler(
		CalculatorServiceComputeExpressionProcedure,
		svc.ComputeExpression,
		opts...,
	)
	return "/calculator.CalculatorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CalculatorServiceComputeExpressionProcedure:
			calculatorServiceComputeExpressionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCalculatorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCalculatorServiceHandler struct{}

func (UnimplementedCalculatorServiceHandler) ComputeExpression(context.Context, *connect_go.Request[gen.ExpressionRequest]) (*connect_go.Response[gen.ExpressionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("calculator.CalculatorService.ComputeExpression is not implemented"))
}
