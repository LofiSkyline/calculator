// @generated by protoc-gen-es v1.10.1 with parameter "target=ts,import_extension=.ts"
// @generated from file calculator.proto (package calculator, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * 请求：表达式
 *
 * @generated from message calculator.ExpressionRequest
 */
export class ExpressionRequest extends Message<ExpressionRequest> {
  /**
   * @generated from field: string expression = 1;
   */
  expression = "";

  constructor(data?: PartialMessage<ExpressionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "calculator.ExpressionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "expression", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExpressionRequest {
    return new ExpressionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExpressionRequest {
    return new ExpressionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExpressionRequest {
    return new ExpressionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExpressionRequest | PlainMessage<ExpressionRequest> | undefined, b: ExpressionRequest | PlainMessage<ExpressionRequest> | undefined): boolean {
    return proto3.util.equals(ExpressionRequest, a, b);
  }
}

/**
 * 响应：结果
 *
 * @generated from message calculator.ExpressionResponse
 */
export class ExpressionResponse extends Message<ExpressionResponse> {
  /**
   * @generated from field: double result = 1;
   */
  result = 0;

  constructor(data?: PartialMessage<ExpressionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "calculator.ExpressionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExpressionResponse {
    return new ExpressionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExpressionResponse {
    return new ExpressionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExpressionResponse {
    return new ExpressionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExpressionResponse | PlainMessage<ExpressionResponse> | undefined, b: ExpressionResponse | PlainMessage<ExpressionResponse> | undefined): boolean {
    return proto3.util.equals(ExpressionResponse, a, b);
  }
}

